#include header.tmpl

/**
 * @author paji
 * @version 2.0.X$
 */
public class Repo extends CobblerObject {

    private Repo(CobblerConnection clientIn) {
        client = clientIn;
    }
  
    /**
     * Create a new repo in cobbler
     * @param client the xmlrpc client
     * @param name the name of the repo
     * @param kernel the kernel path of the repo
     * @param initrd the initrd path of the repo
     * @param ksmeta inital ksmeta to set
     * @return a new Repo
     */
    public static Repo create(CobblerConnection client, 
                                String name, String path) {
        Repo repo = new Repo(client);
        repo.handle = (String) client.invokeTokenMethod("new_repo");
        repo.setName(name)
        repo.setPath(path)
        repo.save();
        repo = lookupByName(client, name);
        return repo;
    }

    /**
     * Returns a repo matching the given name or null
     * @param client the xmlrpc client
     * @param name the repo name
     * @return the repo that maps to the name or null
     */
    public static Repo lookupByName(CobblerConnection client, String name) {
        return handleLookup(client, lookupDataMapByName(client, name, "get_repo"));
    }

    /**
     * Returns a repo matching the given uid or null
     * @param client the xmlrpc client
     * @param id the uid to search for
     * @return the repo matching the UID
     */
    public static Repo lookupById(CobblerConnection client, String id) {
        return handleLookup(client, lookupDataMapById(client, 
                                        id, "find_repo"));
    }
    
    private static Repo handleLookup(CobblerConnection client, Map repoMap) {
        if (repoMap != null) {
            Repo repo = new Repo(client);
            repo.dataMap = repoMap;
            return repo;
        }
        return null;
    }    
    
    /**
     * Returns a list of available Repos 
     * @param connection the cobbler connection
     * @return a list of Repos.
     */
    public static List<Repo> list(CobblerConnection connection) {
        List <Repo> repos = new LinkedList<Repo>();
        List <Map<String, Object >> cRepos = (List <Map<String, Object >>) 
                                        connection.invokeMethod("get_repos");
        
        for (Map<String, Object> repoMap : cRepos) {
            Repo repo = new Repo(connection);
            repo.dataMap = repoMap;
            repos.add(repo);
        }
        return repos;
    }

    @Override
    protected String invokeGetHandle() {
        return (String)client.invokeTokenMethod("get_repo_handle", this.getName());
    }
    
    @Override
    protected void invokeModify(String key, Object value) {
        client.invokeTokenMethod("modify_repo", getHandle(), key, value);
    }
    
    /**
     * Save the repo
     */
    @Override
    protected void invokeSave() {
        client.invokeTokenMethod("save_repo", getHandle());
    }

    /**
     * Remove the repo 
     */
    @Override
    protected boolean invokeRemove() {
        return (Boolean) client.invokeTokenMethod("remove_repo", getName());
    }

    /**
     * Rename the repo 
     */
    @Override
    protected void invokeRename(String newNameIn) {
        client.invokeTokenMethod("rename_repo", getHandle(), newNameIn);
    }
    
    /**
     * Reloads the repo
     */
    @Override
    public void reload() {
        Repo newRepo = lookupById(client, getId());
        dataMap = newRepo.dataMap;
    }
    
    /**
     * @return the arch
     */
    public String getArch() {
        return (String)dataMap.get(ARCH);
    }

    
    /**
     * @param archIn the arch to set
     */
    public void setArch(String archIn) {
        modify(ARCH, archIn);
    }
    
    /**
     * @return the kernelPath
     */
    public String getKernel() {
        return (String)dataMap.get(KERNEL);
    }

    
    /**
     * @param kernelPathIn the kernelPath to set
     */
    public void setKernel(String kernelPathIn) {
        modify(KERNEL, kernelPathIn);
    }

    
    /**
     * @return the osVersion
     */
    public String getOsVersion() {
        return (String)dataMap.get(OS_VERSION);
    }

    
    /**
     * @param osVersionIn the osVersion to set
     */
    public void setOsVersion(String osVersionIn) {
        modify(OS_VERSION, osVersionIn);
    }

    
    /**
     * @return the initrdPath
     */
    public String getInitrd() {
        return (String)dataMap.get(INITRD);
    }

    
    /**
     * @param initrdPathIn the initrdPath to set
     */
    public void setInitrd(String initrdPathIn) {
        modify(INITRD, initrdPathIn);
    }

    
    /**
     * @return the sourceRepos
     */
    public List<String> getSourceRepos() {
        return (List<String>)dataMap.get(SOURCE_REPOS);
    }

    
    /**
     * @param sourceReposIn the sourceRepos to set
     */
    public void setSourceRepos(List<String> sourceReposIn) {
        modify(SOURCE_REPOS, sourceReposIn);
    }
    
    /**
     * @return the treeBuildTime
     */
    public long getTreeBuildTime() {
        return (Long)dataMap.get(TREE_BUILD_TIME);
    }

    
    /**
     * @param treeBuildTimeIn the treeBuildTime to set
     */
    public void setTreeBuildTime(long treeBuildTimeIn) {
        modify(TREE_BUILD_TIME, treeBuildTimeIn);
    }
    
    /**
     * @return the breed
     */
    public String getBreed() {
        return (String)dataMap.get(BREED);
    }

    
    /**
     * @param breedIn the breed to set
     */
    public void setBreed(String breedIn) {
        modify(BREED, breedIn);
    }
}
