#include header.tmpl

/**
 * Network
 * @version $Rev$
 */
public class Network {
    private static final String SUBNET = "subnet";
    private static final String DNS_NAME = "dns_name";
    private static final String IP_ADDRESS = "ip_address";
    private static final String STATIC = "static";
    private static final String MAC_ADDRESS = "mac_address";

    private String name;
    private String subnet;
    private String ipAddress;
    private boolean isStatic;
    private String macAddress;
    /**
     * Constructor to create a new network interface
     * @param nameIn the name of the network
     */
    public Network(String nameIn) {
        name = nameIn;
    }

    /**
     * Intentionally given default/package scope
     * returns a nicely formatted map that can be used by
     * the system record to set it in xmlrpc.
     * @return a map representation of the interface
     */
    Map<String, Object> toMap() {
        Map<String, Object> inet = new HashMap<String, Object>();
        addToMap(inet, "macaddress-" + name, macAddress);
        addToMap(inet, "subnet-" + name, subnet);
        addToMap(inet, "ipaddress-" + name, ipAddress);
        addToMap(inet, "macaddress-" + name, macAddress);
        addToMap(inet, "static-" + name, isStatic);
        return inet;
    }

    private void addToMap(Map<String, Object> inet, String key, Object value) {
        if (value != null || (value instanceof String &&
                            !StringUtils.isBlank((String)value))) {
            inet.put(key, value);
        }
    }

    /**
     * Given a interface name and map generated by the system record
     * this method creates a new Network object.
     * @param name the name of the interface
     * @param ifaceInfo the interface information
     * @return the netwrok object
     */
    static Network load(String name, Map<String, Object> ifaceInfo) {
        Network net = new Network(name);
        net.setMacAddress((String)ifaceInfo.get(MAC_ADDRESS));
        net.setNetmask((String)ifaceInfo.get(SUBNET));
        net.setIpAddress((String)ifaceInfo.get(IP_ADDRESS));
        net.setStaticNetwork(ifaceInfo.containsKey(STATIC) &&
                                    Boolean.TRUE.equals(ifaceInfo.get(STATIC)));
        return net;
    }

    /**
     * @return Returns the name.
     */
    public String getName() {
        return name;
    }

    /**
     * @return Returns the subnet.
     */
    public String getSubnet() {
        return subnet;
    }
    
    /**
     * @param subnetIn The subnet to set.
     */
    public void setNetmask(String subnetIn) {
        subnet = subnetIn;
    }

    /**
     * @return Returns the ipAddress.
     */
    public String getIpAddress() {
        return ipAddress;
    }

    /**
     * @param ipAddressIn The ipAddress to set.
     */
    public void setIpAddress(String ipAddressIn) {
        ipAddress = ipAddressIn;
    }

    /**
     * @return Returns the isStatic.
     */
    public boolean isStaticNetwork() {
        return isStatic;
    }

    /**
     * @param staticIn The isStatic to set.
     */
    public void setStaticNetwork(boolean staticIn) {
        isStatic = staticIn;
    }

    /**
     * @return Returns the macAddress.
     */
    public String getMacAddress() {
        return macAddress;
    }

    /**
     * @param macAddressIn The macAddress to set.
     */
    public void setMacAddress(String macAddressIn) {
        macAddress = macAddressIn;
    }
}
